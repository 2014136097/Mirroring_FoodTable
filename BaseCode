# -*- coding: utf-8 -*-
""" mirror.py
    mirrors a website
    Usage: python mirror.py www.site.com
    Author: Joshua A. Campbell
"""

from HTMLParser import HTMLParser
from htmlentitydefs import name2codepoint#html 앤티티를 해당하는 문자(유니코드)로 변환하는데 사용
import os
import re
import sys
import urllib2

class PageParser(HTMLParser):
    """ class to parse an html page
        html: parsed html ready to save to file
        urls: urls to use for recursive search
    """
    def __init__(self, *args, **kwargs):
        HTMLParser.__init__(self)
        self.html = ""
        self.urls = []
    
    #시작태그
    def handle_starttag(self, tag, attrs):
        self.html += "<" + tag + " "
        for attr in attrs:
            #format urls for recursion
            if attr[0] == 'href':
                #relative to root
                if attr[1].startswith(".."):
                    self.urls.append(attr[1][3:])
                #outbound links
                elif attr[1].startswith("http://"):
                    None
                #links going deeper
                elif attr[1].startswith("/"):
                    self.urls.append("{fp}" + attr[1])
                #same directory as current link
                else:
                    self.urls.append("{fp}/" + attr[1])
            self.html += attr[0] + "=\"" + attr[1] + "\" "
        self.html += ">"
    
    #종료태그
    def handle_endtag(self, tag):
        self.html += "</" + tag + ">"

    #XHTML-style의 tag를 만났을 때 (e.g. <img src =.../>) 호출된다.
    def handle_startendtag(self, tag, attrs):
        self.html += "<" + tag + " "
        for attr in attrs:
            if attr[0] == 'href':
                #relative to root
                if attr[1].startswith(".."):
                    self.urls.append(attr[1][3:])
                #outbound links
                elif attr[1].startswith("http://"):
                    None
                #links going deeper
                elif attr[1].startswith("/"):
                    self.urls.append("{fp}" + attr[1])
                #same directory as current link
                else:
                    self.urls.append("{fp}/" + attr[1])
            self.html += attr[0] + "=\"" + attr[1] + "\" "
        self.html += "/>"

    
    #태그의 내용을 만났을때 호출
    def handle_data(self, data):
        self.html += data.decode('utf-8')#한글 가능하게 utf-8로 변환
        
    # 코멘트(주석)를 만났을 때 호출된다. 
    def handle_comment(self, data):
        self.html += "<!--" + data + "-->"
        
    # 실제 참조를 만났을 때 호출된다.(e.g &lt, &gt, &quote 등)
    def handle_entityref(self, name):
        c = unichr(name2codepoint[name])
        self.html += c
        
    # 문자 참조를 만났을 때 호출된다. 
    def handle_charref(self, name):
        if name.startswith('x'):
            c = unichr(int(name[1:], 16))
        else:
            c = unichr(int(name))
        self.html += c
        
    # HTML doctype 선언을 만났을 때 호출된다 (e.g )     
    def handle_decl(self, data):
        self.html += "<!" + data + ">"


class Page(object):
    """ represents the page of a url
        url: url (relative to the page it was found on)
        fp: filepath (what should precede url to make a valid link)
        siteRoot: site root (http://www.example.com)
    """
    def __init__(self, url, fp):
        self.url = url
        self.fp = fp
        self.fileRoot = "site"
        self.siteRoot = "http://" + sys.argv[1]

    def save(self):
        url = self.url
        #add and update fp if necessary
        url = re.sub("{fp}", self.fp, url)
        last = url.rfind("/")
        self.fp = url[:last]
        #prep filepath
        filepath = url.split("/")
        #final url
        url = self.siteRoot +"/" + url
        #case for the index page
        if len(filepath) ==1 and not filepath[0]:
            filepath.append("index.html")
        filename = filepath[-1]

        #os.path.join = 경로를 연결해주는데 사용
        #create filepath to save on disk
        if not filepath[0]:
            filepath = os.path.join(self.fileRoot, *filepath[1:-1])
        else:
            filepath = os.path.join(self.fileRoot, *filepath[:-1])
            
        #os.path.exists = 경로가 존재하면 true 아니면 false
        if not os.path.exists(filepath):
            os.makedirs(filepath)#<path>에 해당하는 디렉토리 생성
        #존재하면 경로를 새로 연결
        filepath = os.path.join(filepath, filename)

        if os.path.isfile(filepath):#경로가 파일인지 아닌지 검사(경로 차체가 존재하지 않으면 false)
            return

        #write to file
        f = open(filepath, 'w')
        print "Processing:" , url
        r = urllib2.urlopen(url)
        if ".html" in filename:
            parser = PageParser()
            parser.feed( r.read() )
            html = parser.html.encode('ascii', 'replace')
            f.write( html )
            f.close()
            for url in parser.urls:
                nextPage = Page(url, self.fp)
                nextPage.save()
        else:
            f.write( r.read() )
            f.close()


if __name__ == '__main__':
    if len(sys.argv) == 2:
        page = Page("", "")
        page.save()
    else:
        print "Usage: python" , sys.argv[0], "www.example.com"
